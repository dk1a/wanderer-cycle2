// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CharstatSystem } from "../../CharstatSystem.sol";
import { PStat_length } from "../../../../CustomTypes.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CharstatSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "charstat", name: "CharstatSystem" }))
CharstatSystemType constant charstatSystem = CharstatSystemType.wrap(
  0x73796368617273746174000000000000436861727374617453797374656d0000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CharstatSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CharstatSystemLib {
  error CharstatSystemLib_CallingFromRootSystem();
  error CharstatSystem_ExpNotInitialized();

  function setLifeCurrent(CharstatSystemType self, bytes32 targetEntity, uint32 value) internal {
    return CallWrapper(self.toResourceId(), address(0)).setLifeCurrent(targetEntity, value);
  }

  function setManaCurrent(CharstatSystemType self, bytes32 targetEntity, uint32 value) internal {
    return CallWrapper(self.toResourceId(), address(0)).setManaCurrent(targetEntity, value);
  }

  function setFullCurrents(CharstatSystemType self, bytes32 targetEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).setFullCurrents(targetEntity);
  }

  function initExp(CharstatSystemType self, bytes32 targetEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).initExp(targetEntity);
  }

  function increaseExp(CharstatSystemType self, bytes32 targetEntity, uint32[PStat_length] memory addExp) internal {
    return CallWrapper(self.toResourceId(), address(0)).increaseExp(targetEntity, addExp);
  }

  function setLifeCurrent(CallWrapper memory self, bytes32 targetEntity, uint32 value) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CharstatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setLifeCurrent_bytes32_uint32.setLifeCurrent, (targetEntity, value));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setManaCurrent(CallWrapper memory self, bytes32 targetEntity, uint32 value) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CharstatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setManaCurrent_bytes32_uint32.setManaCurrent, (targetEntity, value));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setFullCurrents(CallWrapper memory self, bytes32 targetEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CharstatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setFullCurrents_bytes32.setFullCurrents, (targetEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function initExp(CallWrapper memory self, bytes32 targetEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CharstatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_initExp_bytes32.initExp, (targetEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function increaseExp(CallWrapper memory self, bytes32 targetEntity, uint32[PStat_length] memory addExp) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CharstatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _increaseExp_bytes32_uint320x5b50537461745f6c656e6774685d.increaseExp,
      (targetEntity, addExp)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setLifeCurrent(RootCallWrapper memory self, bytes32 targetEntity, uint32 value) internal {
    bytes memory systemCall = abi.encodeCall(_setLifeCurrent_bytes32_uint32.setLifeCurrent, (targetEntity, value));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setManaCurrent(RootCallWrapper memory self, bytes32 targetEntity, uint32 value) internal {
    bytes memory systemCall = abi.encodeCall(_setManaCurrent_bytes32_uint32.setManaCurrent, (targetEntity, value));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setFullCurrents(RootCallWrapper memory self, bytes32 targetEntity) internal {
    bytes memory systemCall = abi.encodeCall(_setFullCurrents_bytes32.setFullCurrents, (targetEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function initExp(RootCallWrapper memory self, bytes32 targetEntity) internal {
    bytes memory systemCall = abi.encodeCall(_initExp_bytes32.initExp, (targetEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function increaseExp(RootCallWrapper memory self, bytes32 targetEntity, uint32[PStat_length] memory addExp) internal {
    bytes memory systemCall = abi.encodeCall(
      _increaseExp_bytes32_uint320x5b50537461745f6c656e6774685d.increaseExp,
      (targetEntity, addExp)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CharstatSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CharstatSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(CharstatSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CharstatSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CharstatSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CharstatSystemType) {
    return CharstatSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CharstatSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setLifeCurrent_bytes32_uint32 {
  function setLifeCurrent(bytes32 targetEntity, uint32 value) external;
}

interface _setManaCurrent_bytes32_uint32 {
  function setManaCurrent(bytes32 targetEntity, uint32 value) external;
}

interface _setFullCurrents_bytes32 {
  function setFullCurrents(bytes32 targetEntity) external;
}

interface _initExp_bytes32 {
  function initExp(bytes32 targetEntity) external;
}

interface _increaseExp_bytes32_uint320x5b50537461745f6c656e6774685d {
  function increaseExp(bytes32 targetEntity, uint32[PStat_length] memory addExp) external;
}

using CharstatSystemLib for CharstatSystemType global;
using CharstatSystemLib for CallWrapper global;
using CharstatSystemLib for RootCallWrapper global;
