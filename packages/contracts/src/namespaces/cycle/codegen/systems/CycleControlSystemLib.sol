// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CycleControlSystem } from "../../CycleControlSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CycleControlSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "cycle", name: "CycleControlSyst" }))
CycleControlSystemType constant cycleControlSystem = CycleControlSystemType.wrap(
  0x73796379636c650000000000000000004379636c65436f6e74726f6c53797374
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CycleControlSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CycleControlSystemLib {
  error CycleControlSystemLib_CallingFromRootSystem();
  error CompleteCycleSystem_NotAllBossesDefeated();
  error CompleteCycleSystem_InsufficientLevel();

  function startCycle(
    CycleControlSystemType self,
    bytes32 wandererEntity,
    bytes32 guiseEntity,
    bytes32 wheelEntity
  ) internal returns (bytes32 cycleEntity) {
    return CallWrapper(self.toResourceId(), address(0)).startCycle(wandererEntity, guiseEntity, wheelEntity);
  }

  function cancelCycle(CycleControlSystemType self, bytes32 cycleEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).cancelCycle(cycleEntity);
  }

  function completeCycle(CycleControlSystemType self, bytes32 cycleEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).completeCycle(cycleEntity);
  }

  function startCycle(
    CallWrapper memory self,
    bytes32 wandererEntity,
    bytes32 guiseEntity,
    bytes32 wheelEntity
  ) internal returns (bytes32 cycleEntity) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleControlSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _startCycle_bytes32_bytes32_bytes32.startCycle,
      (wandererEntity, guiseEntity, wheelEntity)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32));
  }

  function cancelCycle(CallWrapper memory self, bytes32 cycleEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleControlSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_cancelCycle_bytes32.cancelCycle, (cycleEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function completeCycle(CallWrapper memory self, bytes32 cycleEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleControlSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_completeCycle_bytes32.completeCycle, (cycleEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function startCycle(
    RootCallWrapper memory self,
    bytes32 wandererEntity,
    bytes32 guiseEntity,
    bytes32 wheelEntity
  ) internal returns (bytes32 cycleEntity) {
    bytes memory systemCall = abi.encodeCall(
      _startCycle_bytes32_bytes32_bytes32.startCycle,
      (wandererEntity, guiseEntity, wheelEntity)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes32));
  }

  function cancelCycle(RootCallWrapper memory self, bytes32 cycleEntity) internal {
    bytes memory systemCall = abi.encodeCall(_cancelCycle_bytes32.cancelCycle, (cycleEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function completeCycle(RootCallWrapper memory self, bytes32 cycleEntity) internal {
    bytes memory systemCall = abi.encodeCall(_completeCycle_bytes32.completeCycle, (cycleEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CycleControlSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CycleControlSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(CycleControlSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CycleControlSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CycleControlSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CycleControlSystemType) {
    return CycleControlSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CycleControlSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _startCycle_bytes32_bytes32_bytes32 {
  function startCycle(bytes32 wandererEntity, bytes32 guiseEntity, bytes32 wheelEntity) external;
}

interface _cancelCycle_bytes32 {
  function cancelCycle(bytes32 cycleEntity) external;
}

interface _completeCycle_bytes32 {
  function completeCycle(bytes32 cycleEntity) external;
}

using CycleControlSystemLib for CycleControlSystemType global;
using CycleControlSystemLib for CallWrapper global;
using CycleControlSystemLib for RootCallWrapper global;
