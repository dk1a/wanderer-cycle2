// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { LearnSkillSystem } from "../../LearnSkillSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type LearnSkillSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "skill", name: "LearnSkillSystem" }))
LearnSkillSystemType constant learnSkillSystem = LearnSkillSystemType.wrap(
  0x7379736b696c6c0000000000000000004c6561726e536b696c6c53797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title LearnSkillSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library LearnSkillSystemLib {
  error LearnSkillSystemLib_CallingFromRootSystem();
  error LearnSkillSystem_LearnSkillDuplicate();

  function learnSkill(LearnSkillSystemType self, bytes32 userEntity, bytes32 skillEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).learnSkill(userEntity, skillEntity);
  }

  function copySkills(LearnSkillSystemType self, bytes32 sourceEntity, bytes32 targetEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).copySkills(sourceEntity, targetEntity);
  }

  function learnSkill(CallWrapper memory self, bytes32 userEntity, bytes32 skillEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert LearnSkillSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_learnSkill_bytes32_bytes32.learnSkill, (userEntity, skillEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function copySkills(CallWrapper memory self, bytes32 sourceEntity, bytes32 targetEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert LearnSkillSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_copySkills_bytes32_bytes32.copySkills, (sourceEntity, targetEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function learnSkill(RootCallWrapper memory self, bytes32 userEntity, bytes32 skillEntity) internal {
    bytes memory systemCall = abi.encodeCall(_learnSkill_bytes32_bytes32.learnSkill, (userEntity, skillEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function copySkills(RootCallWrapper memory self, bytes32 sourceEntity, bytes32 targetEntity) internal {
    bytes memory systemCall = abi.encodeCall(_copySkills_bytes32_bytes32.copySkills, (sourceEntity, targetEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(LearnSkillSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(LearnSkillSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(LearnSkillSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(LearnSkillSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(LearnSkillSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (LearnSkillSystemType) {
    return LearnSkillSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(LearnSkillSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _learnSkill_bytes32_bytes32 {
  function learnSkill(bytes32 userEntity, bytes32 skillEntity) external;
}

interface _copySkills_bytes32_bytes32 {
  function copySkills(bytes32 sourceEntity, bytes32 targetEntity) external;
}

using LearnSkillSystemLib for LearnSkillSystemType global;
using LearnSkillSystemLib for CallWrapper global;
using LearnSkillSystemLib for RootCallWrapper global;
