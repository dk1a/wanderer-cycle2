// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CombatSystem } from "../../CombatSystem.sol";
import { CombatAction, CombatActor } from "../../../../CustomTypes.sol";
import { CombatResult } from "../../../../codegen/common.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CombatSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "combat", name: "CombatSystem" }))
CombatSystemType constant combatSystem = CombatSystemType.wrap(
  0x7379636f6d6261740000000000000000436f6d62617453797374656d00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CombatSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CombatSystemLib {
  error CombatSystemLib_CallingFromRootSystem();
  error CombatSystem_InvalidActionsLength();
  error CombatSystem_ResidualDuration();

  function actPVERound(
    CombatSystemType self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    CombatAction[] memory initiatorActions,
    CombatAction[] memory retaliatorActions
  ) internal returns (CombatResult result) {
    return
      CallWrapper(self.toResourceId(), address(0)).actPVERound(
        initiatorEntity,
        retaliatorEntity,
        initiatorActions,
        retaliatorActions
      );
  }

  function actCombatRound(
    CombatSystemType self,
    CombatActor memory initiator,
    CombatActor memory retaliator
  ) internal returns (CombatResult result) {
    return CallWrapper(self.toResourceId(), address(0)).actCombatRound(initiator, retaliator);
  }

  function activateCombat(
    CombatSystemType self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    uint32 maxRounds
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).activateCombat(initiatorEntity, retaliatorEntity, maxRounds);
  }

  function deactivateCombat(CombatSystemType self, bytes32 initiatorEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).deactivateCombat(initiatorEntity);
  }

  function actPVERound(
    CallWrapper memory self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    CombatAction[] memory initiatorActions,
    CombatAction[] memory retaliatorActions
  ) internal returns (CombatResult result) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CombatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _actPVERound_bytes32_bytes32_CombatActionArray_CombatActionArray.actPVERound,
      (initiatorEntity, retaliatorEntity, initiatorActions, retaliatorActions)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (CombatResult));
  }

  function actCombatRound(
    CallWrapper memory self,
    CombatActor memory initiator,
    CombatActor memory retaliator
  ) internal returns (CombatResult result) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CombatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _actCombatRound_CombatActor_CombatActor.actCombatRound,
      (initiator, retaliator)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (CombatResult));
  }

  function activateCombat(
    CallWrapper memory self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    uint32 maxRounds
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CombatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _activateCombat_bytes32_bytes32_uint32.activateCombat,
      (initiatorEntity, retaliatorEntity, maxRounds)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deactivateCombat(CallWrapper memory self, bytes32 initiatorEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CombatSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_deactivateCombat_bytes32.deactivateCombat, (initiatorEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function actPVERound(
    RootCallWrapper memory self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    CombatAction[] memory initiatorActions,
    CombatAction[] memory retaliatorActions
  ) internal returns (CombatResult result) {
    bytes memory systemCall = abi.encodeCall(
      _actPVERound_bytes32_bytes32_CombatActionArray_CombatActionArray.actPVERound,
      (initiatorEntity, retaliatorEntity, initiatorActions, retaliatorActions)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (CombatResult));
  }

  function actCombatRound(
    RootCallWrapper memory self,
    CombatActor memory initiator,
    CombatActor memory retaliator
  ) internal returns (CombatResult result) {
    bytes memory systemCall = abi.encodeCall(
      _actCombatRound_CombatActor_CombatActor.actCombatRound,
      (initiator, retaliator)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (CombatResult));
  }

  function activateCombat(
    RootCallWrapper memory self,
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    uint32 maxRounds
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _activateCombat_bytes32_bytes32_uint32.activateCombat,
      (initiatorEntity, retaliatorEntity, maxRounds)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deactivateCombat(RootCallWrapper memory self, bytes32 initiatorEntity) internal {
    bytes memory systemCall = abi.encodeCall(_deactivateCombat_bytes32.deactivateCombat, (initiatorEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CombatSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CombatSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(CombatSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CombatSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CombatSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CombatSystemType) {
    return CombatSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CombatSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _actPVERound_bytes32_bytes32_CombatActionArray_CombatActionArray {
  function actPVERound(
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    CombatAction[] memory initiatorActions,
    CombatAction[] memory retaliatorActions
  ) external;
}

interface _actCombatRound_CombatActor_CombatActor {
  function actCombatRound(CombatActor memory initiator, CombatActor memory retaliator) external;
}

interface _activateCombat_bytes32_bytes32_uint32 {
  function activateCombat(bytes32 initiatorEntity, bytes32 retaliatorEntity, uint32 maxRounds) external;
}

interface _deactivateCombat_bytes32 {
  function deactivateCombat(bytes32 initiatorEntity) external;
}

using CombatSystemLib for CombatSystemType global;
using CombatSystemLib for CallWrapper global;
using CombatSystemLib for RootCallWrapper global;
