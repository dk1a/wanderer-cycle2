// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { CombatActionType } from "../../../../codegen/common.sol";

struct CombatLogActionOffchainData {
  CombatActionType actionType;
  bytes32 actionEntity;
  uint32 defenderLifeBefore;
  uint32 defenderLifeAfter;
}

library CombatLogActionOffchain {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "combat", name: "CombatLogActionO", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f74636f6d6261740000000000000000436f6d6261744c6f67416374696f6e4f);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0029040001200404000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x008004005f5f1f1f000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bytes32, uint32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x00290400005f0303000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](4);
    keyNames[0] = "attackerEntity";
    keyNames[1] = "defenderEntity";
    keyNames[2] = "roundIndex";
    keyNames[3] = "actionIndex";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "actionType";
    fieldNames[1] = "actionEntity";
    fieldNames[2] = "defenderLifeBefore";
    fieldNames[3] = "defenderLifeAfter";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set actionType.
   */
  function setActionType(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatActionType actionType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(actionType)), _fieldLayout);
  }

  /**
   * @notice Set actionType.
   */
  function _setActionType(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatActionType actionType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(actionType)), _fieldLayout);
  }

  /**
   * @notice Set actionEntity.
   */
  function setActionEntity(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    bytes32 actionEntity
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((actionEntity)), _fieldLayout);
  }

  /**
   * @notice Set actionEntity.
   */
  function _setActionEntity(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    bytes32 actionEntity
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((actionEntity)), _fieldLayout);
  }

  /**
   * @notice Set defenderLifeBefore.
   */
  function setDefenderLifeBefore(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    uint32 defenderLifeBefore
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((defenderLifeBefore)), _fieldLayout);
  }

  /**
   * @notice Set defenderLifeBefore.
   */
  function _setDefenderLifeBefore(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    uint32 defenderLifeBefore
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((defenderLifeBefore)), _fieldLayout);
  }

  /**
   * @notice Set defenderLifeAfter.
   */
  function setDefenderLifeAfter(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    uint32 defenderLifeAfter
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defenderLifeAfter)), _fieldLayout);
  }

  /**
   * @notice Set defenderLifeAfter.
   */
  function _setDefenderLifeAfter(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    uint32 defenderLifeAfter
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defenderLifeAfter)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatActionType actionType,
    bytes32 actionEntity,
    uint32 defenderLifeBefore,
    uint32 defenderLifeAfter
  ) internal {
    bytes memory _staticData = encodeStatic(actionType, actionEntity, defenderLifeBefore, defenderLifeAfter);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatActionType actionType,
    bytes32 actionEntity,
    uint32 defenderLifeBefore,
    uint32 defenderLifeAfter
  ) internal {
    bytes memory _staticData = encodeStatic(actionType, actionEntity, defenderLifeBefore, defenderLifeAfter);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatLogActionOffchainData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionType,
      _table.actionEntity,
      _table.defenderLifeBefore,
      _table.defenderLifeAfter
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex,
    CombatLogActionOffchainData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionType,
      _table.actionEntity,
      _table.defenderLifeBefore,
      _table.defenderLifeAfter
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (CombatActionType actionType, bytes32 actionEntity, uint32 defenderLifeBefore, uint32 defenderLifeAfter)
  {
    actionType = CombatActionType(uint8(Bytes.getBytes1(_blob, 0)));

    actionEntity = (Bytes.getBytes32(_blob, 1));

    defenderLifeBefore = (uint32(Bytes.getBytes4(_blob, 33)));

    defenderLifeAfter = (uint32(Bytes.getBytes4(_blob, 37)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CombatLogActionOffchainData memory _table) {
    (_table.actionType, _table.actionEntity, _table.defenderLifeBefore, _table.defenderLifeAfter) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    CombatActionType actionType,
    bytes32 actionEntity,
    uint32 defenderLifeBefore,
    uint32 defenderLifeAfter
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(actionType, actionEntity, defenderLifeBefore, defenderLifeAfter);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    CombatActionType actionType,
    bytes32 actionEntity,
    uint32 defenderLifeBefore,
    uint32 defenderLifeAfter
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(actionType, actionEntity, defenderLifeBefore, defenderLifeAfter);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    bytes32 attackerEntity,
    bytes32 defenderEntity,
    uint256 roundIndex,
    uint256 actionIndex
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = attackerEntity;
    _keyTuple[1] = defenderEntity;
    _keyTuple[2] = bytes32(uint256(roundIndex));
    _keyTuple[3] = bytes32(uint256(actionIndex));

    return _keyTuple;
  }
}
