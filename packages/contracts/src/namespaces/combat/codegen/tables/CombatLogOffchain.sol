// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { CombatResult } from "../../../../codegen/common.sol";

struct CombatLogOffchainData {
  uint256 roundsSpent;
  uint256 roundsMax;
  CombatResult combatResult;
}

library CombatLogOffchain {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "combat", name: "CombatLogOffchai", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f74636f6d6261740000000000000000436f6d6261744c6f674f666663686169);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0041030020200100000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint8)
  Schema constant _valueSchema = Schema.wrap(0x004103001f1f0000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "initiatorEntity";
    keyNames[1] = "retaliatorEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "roundsSpent";
    fieldNames[1] = "roundsMax";
    fieldNames[2] = "combatResult";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set roundsSpent.
   */
  function setRoundsSpent(bytes32 initiatorEntity, bytes32 retaliatorEntity, uint256 roundsSpent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((roundsSpent)), _fieldLayout);
  }

  /**
   * @notice Set roundsSpent.
   */
  function _setRoundsSpent(bytes32 initiatorEntity, bytes32 retaliatorEntity, uint256 roundsSpent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((roundsSpent)), _fieldLayout);
  }

  /**
   * @notice Set roundsMax.
   */
  function setRoundsMax(bytes32 initiatorEntity, bytes32 retaliatorEntity, uint256 roundsMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((roundsMax)), _fieldLayout);
  }

  /**
   * @notice Set roundsMax.
   */
  function _setRoundsMax(bytes32 initiatorEntity, bytes32 retaliatorEntity, uint256 roundsMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((roundsMax)), _fieldLayout);
  }

  /**
   * @notice Set combatResult.
   */
  function setCombatResult(bytes32 initiatorEntity, bytes32 retaliatorEntity, CombatResult combatResult) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(combatResult)), _fieldLayout);
  }

  /**
   * @notice Set combatResult.
   */
  function _setCombatResult(bytes32 initiatorEntity, bytes32 retaliatorEntity, CombatResult combatResult) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(combatResult)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    uint256 roundsSpent,
    uint256 roundsMax,
    CombatResult combatResult
  ) internal {
    bytes memory _staticData = encodeStatic(roundsSpent, roundsMax, combatResult);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 initiatorEntity,
    bytes32 retaliatorEntity,
    uint256 roundsSpent,
    uint256 roundsMax,
    CombatResult combatResult
  ) internal {
    bytes memory _staticData = encodeStatic(roundsSpent, roundsMax, combatResult);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 initiatorEntity, bytes32 retaliatorEntity, CombatLogOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.roundsSpent, _table.roundsMax, _table.combatResult);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 initiatorEntity, bytes32 retaliatorEntity, CombatLogOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.roundsSpent, _table.roundsMax, _table.combatResult);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 roundsSpent, uint256 roundsMax, CombatResult combatResult) {
    roundsSpent = (uint256(Bytes.getBytes32(_blob, 0)));

    roundsMax = (uint256(Bytes.getBytes32(_blob, 32)));

    combatResult = CombatResult(uint8(Bytes.getBytes1(_blob, 64)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CombatLogOffchainData memory _table) {
    (_table.roundsSpent, _table.roundsMax, _table.combatResult) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 initiatorEntity, bytes32 retaliatorEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 initiatorEntity, bytes32 retaliatorEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 roundsSpent,
    uint256 roundsMax,
    CombatResult combatResult
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(roundsSpent, roundsMax, combatResult);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 roundsSpent,
    uint256 roundsMax,
    CombatResult combatResult
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(roundsSpent, roundsMax, combatResult);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 initiatorEntity, bytes32 retaliatorEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = initiatorEntity;
    _keyTuple[1] = retaliatorEntity;

    return _keyTuple;
  }
}
