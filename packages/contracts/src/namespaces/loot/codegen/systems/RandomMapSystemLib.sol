// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RandomMapSystem } from "../../RandomMapSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RandomMapSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "loot", name: "RandomMapSystem" }))
RandomMapSystemType constant randomMapSystem = RandomMapSystemType.wrap(
  0x73796c6f6f740000000000000000000052616e646f6d4d617053797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RandomMapSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RandomMapSystemLib {
  error RandomMapSystemLib_CallingFromRootSystem();

  function callFrom(RandomMapSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RandomMapSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(RandomMapSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RandomMapSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RandomMapSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RandomMapSystemType) {
    return RandomMapSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RandomMapSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using RandomMapSystemLib for RandomMapSystemType global;
using RandomMapSystemLib for CallWrapper global;
using RandomMapSystemLib for RootCallWrapper global;
