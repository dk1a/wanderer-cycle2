// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { WheelSystem } from "../../WheelSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WheelSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "wheel", name: "WheelSystem" }))
WheelSystemType constant wheelSystem = WheelSystemType.wrap(
  0x7379776865656c000000000000000000576865656c53797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title WheelSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WheelSystemLib {
  error WheelSystemLib_CallingFromRootSystem();
  error LibWheel_InvalidWheelEntity();
  error LibWheel_WheelAlreadyActive(bytes32 cycleEntity);
  error LibWheel_WheelNotActive(bytes32 cycleEntity);
  error LibWheel_InsufficientIdentity(bytes32 wandererEntity, uint256 identityTotal, uint256 identityRequired);

  function activateWheel(
    WheelSystemType self,
    bytes32 wandererEntity,
    bytes32 cycleEntity,
    bytes32 wheelEntity
  ) internal returns (bool isIsolated) {
    return CallWrapper(self.toResourceId(), address(0)).activateWheel(wandererEntity, cycleEntity, wheelEntity);
  }

  function completeWheel(WheelSystemType self, bytes32 wandererEntity, bytes32 cycleEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).completeWheel(wandererEntity, cycleEntity);
  }

  function rewardIdentity(WheelSystemType self, bytes32 wandererEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).rewardIdentity(wandererEntity);
  }

  function activateWheel(
    CallWrapper memory self,
    bytes32 wandererEntity,
    bytes32 cycleEntity,
    bytes32 wheelEntity
  ) internal returns (bool isIsolated) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WheelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _activateWheel_bytes32_bytes32_bytes32.activateWheel,
      (wandererEntity, cycleEntity, wheelEntity)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function completeWheel(CallWrapper memory self, bytes32 wandererEntity, bytes32 cycleEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WheelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _completeWheel_bytes32_bytes32.completeWheel,
      (wandererEntity, cycleEntity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function rewardIdentity(CallWrapper memory self, bytes32 wandererEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WheelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_rewardIdentity_bytes32.rewardIdentity, (wandererEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function activateWheel(
    RootCallWrapper memory self,
    bytes32 wandererEntity,
    bytes32 cycleEntity,
    bytes32 wheelEntity
  ) internal returns (bool isIsolated) {
    bytes memory systemCall = abi.encodeCall(
      _activateWheel_bytes32_bytes32_bytes32.activateWheel,
      (wandererEntity, cycleEntity, wheelEntity)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool));
  }

  function completeWheel(RootCallWrapper memory self, bytes32 wandererEntity, bytes32 cycleEntity) internal {
    bytes memory systemCall = abi.encodeCall(
      _completeWheel_bytes32_bytes32.completeWheel,
      (wandererEntity, cycleEntity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function rewardIdentity(RootCallWrapper memory self, bytes32 wandererEntity) internal {
    bytes memory systemCall = abi.encodeCall(_rewardIdentity_bytes32.rewardIdentity, (wandererEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(WheelSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(WheelSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(WheelSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(WheelSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(WheelSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WheelSystemType) {
    return WheelSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(WheelSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _activateWheel_bytes32_bytes32_bytes32 {
  function activateWheel(bytes32 wandererEntity, bytes32 cycleEntity, bytes32 wheelEntity) external;
}

interface _completeWheel_bytes32_bytes32 {
  function completeWheel(bytes32 wandererEntity, bytes32 cycleEntity) external;
}

interface _rewardIdentity_bytes32 {
  function rewardIdentity(bytes32 wandererEntity) external;
}

using WheelSystemLib for WheelSystemType global;
using WheelSystemLib for CallWrapper global;
using WheelSystemLib for RootCallWrapper global;
