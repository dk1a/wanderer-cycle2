/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/utils";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Counter: (() => {
      const tableId = new TableId("", "Counter");
      return defineComponent(
        world,
        {
          value: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    FromPrototype: (() => {
      const tableId = new TableId("", "FromPrototype");
      return defineComponent(
        world,
        {
          value: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AffixAvailable: (() => {
      const tableId = new TableId("", "AffixAvailable");
      return defineComponent(
        world,
        {
          value: RecsType.BigIntArray,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AffixNaming: (() => {
      const tableId = new TableId("", "AffixNaming");
      return defineComponent(
        world,
        {
          value: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AffixPrototype: (() => {
      const tableId = new TableId("", "AffixPrototype");
      return defineComponent(
        world,
        {
          statmodProtoEntity: RecsType.String,
          tier: RecsType.Number,
          requiredLevel: RecsType.Number,
          min: RecsType.Number,
          max: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AffixProtoIndex: (() => {
      const tableId = new TableId("", "AffixProtoIndex");
      return defineComponent(
        world,
        {
          value: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    AffixProtoGroup: (() => {
      const tableId = new TableId("", "AffixProtoGroup");
      return defineComponent(
        world,
        {
          value: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Affix: (() => {
      const tableId = new TableId("", "Affix");
      return defineComponent(
        world,
        {
          partId: RecsType.Number,
          protoEntity: RecsType.String,
          value: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Experience: (() => {
      const tableId = new TableId("", "Experience");
      return defineComponent(
        world,
        {
          value: RecsType.NumberArray,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    ActiveGuise: (() => {
      const tableId = new TableId("", "ActiveGuise");
      return defineComponent(
        world,
        {
          value: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    GuisePrototype: (() => {
      const tableId = new TableId("", "GuisePrototype");
      return defineComponent(
        world,
        {
          value: RecsType.NumberArray,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
